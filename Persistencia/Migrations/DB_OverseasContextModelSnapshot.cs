// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

namespace Persistencia.Migrations
{
    [DbContext(typeof(DB_OverseasContext))]
    partial class DB_OverseasContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entidades.Ambiente", b =>
                {
                    b.Property<int>("IdAmbiente")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aula");

                    b.Property<string>("DescripcionAmbiente");

                    b.Property<string>("Direccion");

                    b.Property<int>("Estado");

                    b.HasKey("IdAmbiente");

                    b.ToTable("Ambiente");
                });

            modelBuilder.Entity("Entidades.Apoderado", b =>
                {
                    b.Property<int>("IdApoderado")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApellidosApoderado");

                    b.Property<string>("CorreoApoderado");

                    b.Property<string>("NombresApoderado");

                    b.HasKey("IdApoderado");

                    b.ToTable("Apoderado");
                });

            modelBuilder.Entity("Entidades.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Entidades.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("IdPersona");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("StatusUser");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("IdPersona");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Entidades.Asistencia", b =>
                {
                    b.Property<int>("IdAsistencia")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AsistenciaEstudiante");

                    b.Property<int>("IdEstudiante");

                    b.Property<int>("IdSesion");

                    b.HasKey("IdAsistencia");

                    b.HasIndex("IdEstudiante");

                    b.HasIndex("IdSesion");

                    b.ToTable("Asistencia");
                });

            modelBuilder.Entity("Entidades.Curso", b =>
                {
                    b.Property<int>("IdCurso")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ciclo");

                    b.Property<string>("Detalle");

                    b.Property<int>("Estado");

                    b.Property<DateTime>("FechaFin");

                    b.Property<DateTime>("FechaInicio");

                    b.Property<int?>("IdDocente");

                    b.Property<int>("IdTipoCurso");

                    b.Property<string>("Idioma");

                    b.Property<string>("ModalidadEstudiantes");

                    b.Property<string>("Nivel");

                    b.Property<string>("Programa");

                    b.HasKey("IdCurso");

                    b.HasIndex("IdDocente");

                    b.HasIndex("IdTipoCurso");

                    b.ToTable("Curso");
                });

            modelBuilder.Entity("Entidades.DetalleApoderadoEstudiante", b =>
                {
                    b.Property<int>("IdDetalleApodEst")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdApoderado");

                    b.Property<int>("IdEstudiante");

                    b.HasKey("IdDetalleApodEst");

                    b.HasIndex("IdApoderado")
                        .IsUnique();

                    b.HasIndex("IdEstudiante");

                    b.ToTable("DetalleApoderadoEstudiante");
                });

            modelBuilder.Entity("Entidades.DetalleDocenteEspecialidad", b =>
                {
                    b.Property<int>("IdDetalleDocenteEspecialidad")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdDocente");

                    b.Property<int>("IdEspecialidad");

                    b.HasKey("IdDetalleDocenteEspecialidad");

                    b.HasIndex("IdDocente");

                    b.HasIndex("IdEspecialidad");

                    b.ToTable("DetalleDocenteEspecialidad");
                });

            modelBuilder.Entity("Entidades.Docente", b =>
                {
                    b.Property<int>("IdDocente")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Estado");

                    b.Property<int>("IdPersona");

                    b.HasKey("IdDocente");

                    b.HasIndex("IdPersona");

                    b.ToTable("Docente");
                });

            modelBuilder.Entity("Entidades.Especialidad", b =>
                {
                    b.Property<int>("IdEspecialidad")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescripcionEspecialidad");

                    b.HasKey("IdEspecialidad");

                    b.ToTable("Especialidad");
                });

            modelBuilder.Entity("Entidades.Estudiante", b =>
                {
                    b.Property<int>("IdEstudiante")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPersona");

                    b.Property<int>("PoseeApoderado");

                    b.Property<string>("ReferenciaEstudiante");

                    b.HasKey("IdEstudiante");

                    b.HasIndex("IdPersona");

                    b.ToTable("Estudiante");
                });

            modelBuilder.Entity("Entidades.Evaluacion", b =>
                {
                    b.Property<int>("IdEvaluacion")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CalificacionEvaluacion");

                    b.Property<int>("IdHistorialEvaluacion");

                    b.Property<int>("IdTipoEvaluacion");

                    b.HasKey("IdEvaluacion");

                    b.HasIndex("IdHistorialEvaluacion");

                    b.HasIndex("IdTipoEvaluacion");

                    b.ToTable("Evaluacion");
                });

            modelBuilder.Entity("Entidades.HistorialEvaluacion", b =>
                {
                    b.Property<int>("IdHistorialEvaluacion")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FeedbackHistorialEvaluacion");

                    b.Property<int>("IdCurso");

                    b.Property<int>("IdEstudiante");

                    b.HasKey("IdHistorialEvaluacion");

                    b.HasIndex("IdCurso");

                    b.HasIndex("IdEstudiante");

                    b.ToTable("HistorialEvaluacion");
                });

            modelBuilder.Entity("Entidades.Horario", b =>
                {
                    b.Property<int>("IdHorario")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dia");

                    b.Property<TimeSpan>("HoraFin");

                    b.Property<TimeSpan>("HoraInicio");

                    b.Property<int>("IdAmbiente");

                    b.Property<int>("IdCurso");

                    b.HasKey("IdHorario");

                    b.HasIndex("IdAmbiente");

                    b.HasIndex("IdCurso");

                    b.ToTable("Horario");
                });

            modelBuilder.Entity("Entidades.Inscripcion", b =>
                {
                    b.Property<int>("IdInscripcion")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EstadoInscripcion");

                    b.Property<DateTime>("FechaInscripcion");

                    b.Property<int>("IdCurso");

                    b.Property<int>("IdEstudiante");

                    b.HasKey("IdInscripcion");

                    b.HasIndex("IdCurso");

                    b.HasIndex("IdEstudiante");

                    b.ToTable("Inscripcion");
                });

            modelBuilder.Entity("Entidades.Persona", b =>
                {
                    b.Property<int>("IdPersona")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApellidosPersona");

                    b.Property<string>("CorreoPersona");

                    b.Property<string>("DireccionPersona");

                    b.Property<string>("DniPersona");

                    b.Property<DateTime>("FechaNacimientoPersona");

                    b.Property<string>("NombresPersona");

                    b.Property<string>("TelefonoPersona");

                    b.HasKey("IdPersona");

                    b.ToTable("Persona");
                });

            modelBuilder.Entity("Entidades.Sesion", b =>
                {
                    b.Property<int>("IdSesion")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AsistenciaDocente");

                    b.Property<DateTime>("FechaSesion");

                    b.Property<int>("IdHorario");

                    b.Property<int>("NumeroSesion");

                    b.HasKey("IdSesion");

                    b.HasIndex("IdHorario");

                    b.ToTable("Sesion");
                });

            modelBuilder.Entity("Entidades.TipoCurso", b =>
                {
                    b.Property<int>("IdTipoCurso")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NombreCurso");

                    b.HasKey("IdTipoCurso");

                    b.ToTable("TipoCurso");
                });

            modelBuilder.Entity("Entidades.TipoCursoTipoEvaluacion", b =>
                {
                    b.Property<int>("idTipoCursoTipoEvaluacion")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdTipoCurso");

                    b.Property<int>("IdTipoEvaluacion");

                    b.HasKey("idTipoCursoTipoEvaluacion");

                    b.HasIndex("IdTipoCurso");

                    b.HasIndex("IdTipoEvaluacion");

                    b.ToTable("TipoCursoTipoEvaluacion");
                });

            modelBuilder.Entity("Entidades.TipoEvaluacion", b =>
                {
                    b.Property<int>("IdTipoEvaluacion")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NombreEvaluacion");

                    b.HasKey("IdTipoEvaluacion");

                    b.ToTable("TipoEvaluacion");
                });

            modelBuilder.Entity("Entidades.Traduccion", b =>
                {
                    b.Property<int>("IdTraduccion")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClienteTraduccion");

                    b.Property<string>("DetalleTraduccion");

                    b.Property<int>("EstadoTraduccion");

                    b.Property<DateTime>("FechaTraduccion");

                    b.Property<int?>("IdDocente");

                    b.Property<string>("IdiomaDestinoTraduccion");

                    b.Property<string>("IdiomaOrigenTraduccion");

                    b.Property<string>("TipoTraduccion");

                    b.HasKey("IdTraduccion");

                    b.HasIndex("IdDocente");

                    b.ToTable("Traduccion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entidades.AppUser", b =>
                {
                    b.HasOne("Entidades.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("IdPersona")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidades.Asistencia", b =>
                {
                    b.HasOne("Entidades.Estudiante", "Estudiante")
                        .WithMany()
                        .HasForeignKey("IdEstudiante")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entidades.Sesion", "Sesion")
                        .WithMany()
                        .HasForeignKey("IdSesion")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidades.Curso", b =>
                {
                    b.HasOne("Entidades.Docente", "Docente")
                        .WithMany()
                        .HasForeignKey("IdDocente");

                    b.HasOne("Entidades.TipoCurso", "TipoCurso")
                        .WithMany()
                        .HasForeignKey("IdTipoCurso")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidades.DetalleApoderadoEstudiante", b =>
                {
                    b.HasOne("Entidades.Apoderado", "Apoderado")
                        .WithOne("DetalleApoderadoEstudiante")
                        .HasForeignKey("Entidades.DetalleApoderadoEstudiante", "IdApoderado")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entidades.Estudiante", "Estudiante")
                        .WithMany()
                        .HasForeignKey("IdEstudiante")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidades.DetalleDocenteEspecialidad", b =>
                {
                    b.HasOne("Entidades.Docente", "Docente")
                        .WithMany()
                        .HasForeignKey("IdDocente")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entidades.Especialidad", "Especialidad")
                        .WithMany()
                        .HasForeignKey("IdEspecialidad")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidades.Docente", b =>
                {
                    b.HasOne("Entidades.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("IdPersona")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidades.Estudiante", b =>
                {
                    b.HasOne("Entidades.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("IdPersona")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidades.Evaluacion", b =>
                {
                    b.HasOne("Entidades.HistorialEvaluacion", "HistorialEvaluacion")
                        .WithMany()
                        .HasForeignKey("IdHistorialEvaluacion")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entidades.TipoEvaluacion", "TipoEvaluacion")
                        .WithMany()
                        .HasForeignKey("IdTipoEvaluacion")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidades.HistorialEvaluacion", b =>
                {
                    b.HasOne("Entidades.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("IdCurso")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entidades.Estudiante", "Estudiante")
                        .WithMany()
                        .HasForeignKey("IdEstudiante")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidades.Horario", b =>
                {
                    b.HasOne("Entidades.Ambiente", "Ambiente")
                        .WithMany()
                        .HasForeignKey("IdAmbiente")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entidades.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("IdCurso")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidades.Inscripcion", b =>
                {
                    b.HasOne("Entidades.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("IdCurso")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entidades.Estudiante", "Estudiante")
                        .WithMany()
                        .HasForeignKey("IdEstudiante")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidades.Sesion", b =>
                {
                    b.HasOne("Entidades.Horario", "Horario")
                        .WithMany()
                        .HasForeignKey("IdHorario")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidades.TipoCursoTipoEvaluacion", b =>
                {
                    b.HasOne("Entidades.TipoCurso", "TipoCurso")
                        .WithMany()
                        .HasForeignKey("IdTipoCurso")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entidades.TipoEvaluacion", "TipoEvaluacion")
                        .WithMany()
                        .HasForeignKey("IdTipoEvaluacion")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entidades.Traduccion", b =>
                {
                    b.HasOne("Entidades.Docente", "Docente")
                        .WithMany()
                        .HasForeignKey("IdDocente");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Entidades.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Entidades.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Entidades.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Entidades.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entidades.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Entidades.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
